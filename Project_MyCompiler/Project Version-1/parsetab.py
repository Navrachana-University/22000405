
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSleftLTAGAR ASSIGN CHHAPO ID JABTAK LBRACE LPAREN LT NUMBER PLUS RBRACE RPAREN SEMI WARNAprogram : statementsstatements : statements statementstatements : statementstatement : ID ASSIGN expression SEMIstatement : CHHAPO expression SEMIstatement : AGAR LPAREN expression RPAREN statement WARNA statementstatement : JABTAK LPAREN expression RPAREN statementexpression : expression PLUS expression\n| expression LT expressionexpression : NUMBERexpression : IDstatement : LBRACE statements RBRACE'
    
_lr_action_items = {'ID':([0,2,3,5,8,9,10,14,15,16,18,19,20,23,24,27,28,30,31,32,],[4,4,-3,13,4,-2,13,13,13,4,-5,13,13,-12,-4,4,4,-7,4,-6,]),'CHHAPO':([0,2,3,8,9,16,18,23,24,27,28,30,31,32,],[5,5,-3,5,-2,5,-5,-12,-4,5,5,-7,5,-6,]),'AGAR':([0,2,3,8,9,16,18,23,24,27,28,30,31,32,],[6,6,-3,6,-2,6,-5,-12,-4,6,6,-7,6,-6,]),'JABTAK':([0,2,3,8,9,16,18,23,24,27,28,30,31,32,],[7,7,-3,7,-2,7,-5,-12,-4,7,7,-7,7,-6,]),'LBRACE':([0,2,3,8,9,16,18,23,24,27,28,30,31,32,],[8,8,-3,8,-2,8,-5,-12,-4,8,8,-7,8,-6,]),'$end':([1,2,3,9,18,23,24,30,32,],[0,-1,-3,-2,-5,-12,-4,-7,-6,]),'RBRACE':([3,9,16,18,23,24,30,32,],[-3,-2,23,-5,-12,-4,-7,-6,]),'ASSIGN':([4,],[10,]),'NUMBER':([5,10,14,15,19,20,],[12,12,12,12,12,12,]),'LPAREN':([6,7,],[14,15,]),'SEMI':([11,12,13,17,25,26,],[18,-10,-11,24,-8,-9,]),'PLUS':([11,12,13,17,21,22,25,26,],[19,-10,-11,19,19,19,-8,-9,]),'LT':([11,12,13,17,21,22,25,26,],[20,-10,-11,20,20,20,20,-9,]),'RPAREN':([12,13,21,22,25,26,],[-10,-11,27,28,-8,-9,]),'WARNA':([18,23,24,29,30,32,],[-5,-12,-4,31,-7,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,8,],[2,16,]),'statement':([0,2,8,16,27,28,31,],[3,9,3,9,29,30,32,]),'expression':([5,10,14,15,19,20,],[11,17,21,22,25,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',65),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',69),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',73),
  ('statement -> ID ASSIGN expression SEMI','statement',4,'p_statement_assign','parser.py',77),
  ('statement -> CHHAPO expression SEMI','statement',3,'p_statement_print','parser.py',81),
  ('statement -> AGAR LPAREN expression RPAREN statement WARNA statement','statement',7,'p_statement_if_else','parser.py',85),
  ('statement -> JABTAK LPAREN expression RPAREN statement','statement',5,'p_statement_while','parser.py',89),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',93),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',94),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',98),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',102),
  ('statement -> LBRACE statements RBRACE','statement',3,'p_statement_block','parser.py',106),
]
